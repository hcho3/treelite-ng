/*!
 * Copyright (c) 2017-2023 by Contributors
 * \file c_api.h
 * \author Hyunsu Cho
 * \brief C API of Treelite, used for interfacing with other languages
 */

/* Note: Make sure to use slash-asterisk form of comments in this file
   (like this one). Do not use double-slash (//). */

#ifndef TREELITE_C_API_H_
#define TREELITE_C_API_H_

#ifdef __cplusplus
#define TREELITE_EXTERN_C extern "C"
#include <cstdint>
#include <cstdio>
#else
#define TREELITE_EXTERN_C
#include <stdint.h>
#include <stdio.h>
#endif

/* Special symbols for DLL library on Windows */
#if defined(_MSC_VER) || defined(_WIN32)
#define TREELITE_DLL TREELITE_EXTERN_C __declspec(dllexport)
#else
#define TREELITE_DLL TREELITE_EXTERN_C __attribute__((visibility("default")))
#endif

/*!
 * \addtogroup opaque_handles
 * Opaque handles
 * \{
 */
/*! \brief Handle to a decision tree ensemble model */
typedef void* TreeliteModelHandle;
/*! \} */

/*!
 * \defgroup model_loader Model loaders for XGBoost and LightGBM
 * \{
 */
/*!
 * \brief Deprecated. Please use \ref TreeliteLoadXGBoostModelEx instead.
 */
TREELITE_DLL int TreeliteLoadXGBoostModel(char const* filename, TreeliteModelHandle* out);
/*!
 * \brief Load a model file generated by XGBoost (dmlc/xgboost). The model file
 *        must contain a decision tree ensemble.
 * \param filename Name of model file
 * \param config_json JSON string consisting key-value pairs; used for configuring the model parser
 * \param out Loaded model
 * \return 0 for success, -1 for failure
 */
TREELITE_DLL int TreeliteLoadXGBoostModelEx(
    char const* filename, char const* config_json, TreeliteModelHandle* out);
/*!
 * \brief Deprecated. Please use \ref TreeliteLoadXGBoostJSONEx instead.
 */
TREELITE_DLL int TreeliteLoadXGBoostJSON(char const* filename, TreeliteModelHandle* out);
/*!
 * \brief Load a json model file generated by XGBoost (dmlc/xgboost). The model
 *        file must contain a decision tree ensemble.
 * \param filename Name of model file
 * \param config_json Null-terminated JSON string consisting key-value pairs; used for configuring
 *                    the model parser
 * \param out Loaded model
 * \return 0 for success, -1 for failure
 */
TREELITE_DLL int TreeliteLoadXGBoostJSONEx(
    char const* filename, char const* config_json, TreeliteModelHandle* out);
/*!
 * \brief Deprecated. Please use \ref TreeliteLoadXGBoostJSONStringEx instead.
 */
TREELITE_DLL int TreeliteLoadXGBoostJSONString(
    char const* json_str, size_t length, TreeliteModelHandle* out);
/*!
 * \brief Load a model stored as JSON string by XGBoost (dmlc/xgboost). The model
 *        json must contain a decision tree ensemble.
 * \param json_str String containing the JSON model specification
 * \param length Length of the JSON string
 * \param config_json Null-terminated JSON string consisting key-value pairs; used for configuring
 *                    the model parser
 * \param out Loaded model
 * \return 0 for success, -1 for failure
 */
TREELITE_DLL int TreeliteLoadXGBoostJSONStringEx(
    char const* json_str, size_t length, char const* config_json, TreeliteModelHandle* out);
/*!
 * \brief Deprecated. Please use \ref TreeliteLoadXGBoostModelFromMemoryBufferEx instead.
 */
TREELITE_DLL int TreeliteLoadXGBoostModelFromMemoryBuffer(
    void const* buf, size_t len, TreeliteModelHandle* out);
/*!
 * \brief Load an XGBoost model from a memory buffer.
 * \param buf Memory buffer
 * \param len Size of memory buffer
 * \param config_json Null-terminated JSON string consisting key-value pairs; used for configuring
 *                    the model parser
 * \param out Loaded model
 * \return 0 for success, -1 for failure
 */
TREELITE_DLL int TreeliteLoadXGBoostModelFromMemoryBufferEx(
    void const* buf, size_t len, char const* config_json, TreeliteModelHandle* out);
/*!
 * \brief Deprecated. Please use \ref TreeliteLoadLightGBMModelEx instead.
 */
TREELITE_DLL int TreeliteLoadLightGBMModel(char const* filename, TreeliteModelHandle* out);
/*!
 * \brief Load a model file generated by LightGBM (Microsoft/LightGBM). The
 *        model file must contain a decision tree ensemble.
 * \param filename Name of model file
 * \param config_json Null-terminated JSON string consisting key-value pairs; used for configuring
 *                    the model parser
 * \param out Loaded model
 * \return 0 for success, -1 for failure
 */
TREELITE_DLL int TreeliteLoadLightGBMModelEx(
    char const* filename, char const* config_json, TreeliteModelHandle* out);
/*!
 * \brief Deprecated. Please use \ref TreeliteLoadLightGBMModelFromStringEx instead.
 */
TREELITE_DLL int TreeliteLoadLightGBMModelFromString(
    char const* model_str, TreeliteModelHandle* out);

/*!
 * \brief Load a LightGBM model from a string. The string should be created with the
 *        model_to_string() method in LightGBM.
 * \param model_str Model string
 * \param config_json Null-terminated JSON string consisting key-value pairs; used for configuring
 *                    the model parser
 * \param out Loaded model
 * \return 0 for success, -1 for failure
 */
TREELITE_DLL int TreeliteLoadLightGBMModelFromStringEx(
    char const* model_str, char const* config_json, TreeliteModelHandle* out);
/*! \} */

/*!
 * \defgroup model_manager Functions to query and modify model objects
 * \{
 */
/*!
 * \brief Dump a model object as a JSON string
 * \param handle The handle to the model object
 * \param pretty_print Whether to pretty-print JSON string (0 for false, != 0 for true)
 * \param out_json_str The JSON string
 * \return 0 for success, -1 for failure
 */
TREELITE_DLL int TreeliteDumpAsJSON(
    TreeliteModelHandle handle, int pretty_print, char const** out_json_str);
/*!
 * \brief Delete model from memory
 * \param handle Model to remove
 * \return 0 for success, -1 for failure
 */
TREELITE_DLL int TreeliteFreeModel(TreeliteModelHandle handle);
/*! \} */

/*!
 * \brief Display last error; can be called by multiple threads
 * Note. Each thread will get the last error occured in its own context.
 * \return Error string
 */
TREELITE_DLL char const* TreeliteGetLastError(void);

/*!
 * \brief Register callback function for LOG(INFO) messages -- helpful messages
 *        that are not errors.
 * Note: This function can be called by multiple threads. The callback function
 *       will run on the thread that registered it
 * \return 0 for success, -1 for failure
 */
TREELITE_DLL int TreeliteRegisterLogCallback(void (*callback)(char const*));

/*!
 * \brief Register callback function for LOG(WARNING) messages
 * Note: This function can be called by multiple threads. The callback function
 *       will run on the thread that registered it
 * \return 0 for success, -1 for failure
 */
TREELITE_DLL int TreeliteRegisterWarningCallback(void (*callback)(char const*));

#endif  // TREELITE_C_API_H_
