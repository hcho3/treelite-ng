/*!
 * Copyright (c) 2017-2023 by Contributors
 * \file frontend.h
 * \brief Collection of front-end methods to load or construct ensemble model
 * \author Hyunsu Cho
 */
#ifndef TREELITE_FRONTEND_H_
#define TREELITE_FRONTEND_H_

#include <memory>
#include <cstddef>

namespace treelite {

class Model;  // forward declaration

namespace frontend {

//--------------------------------------------------------------------------
// Model loaders for XGBoost and LightGBM
//--------------------------------------------------------------------------
/*!
 * \brief load a model file generated by XGBoost (dmlc/xgboost). The model file
 *        must contain a decision tree ensemble.
 * \param filename name of model file
 * \return loaded model
 */
std::unique_ptr<treelite::Model> LoadXGBoostModel(std::string const& filename);
/*!
 * \brief load an XGBoost model from a memory buffer.
 * \param buf memory buffer
 * \param len size of memory buffer
 * \return loaded model
 */
std::unique_ptr<treelite::Model> LoadXGBoostModel(void const* buf, std::size_t len);
/*!
 * \brief load a model file generated by XGBoost (dmlc/xgboost). The model file
 *        must contain a decision tree ensemble in the JSON format.
 * \param filename name of model file
 * \param config_json JSON string consisting of key-value pairs; used for configuring the model
 *                    parser
 * \return loaded model
 */
std::unique_ptr<treelite::Model> LoadXGBoostJSONModel(
    char const* filename, char const* config_json);
/*!
 * \brief load an XGBoost model from a JSON string
 * \param json_str JSON char array
 * \param length length of JSON char array
 * \param config_json JSON string consisting of key-value pairs; used for configuring the model
 *                    parser
 * \return loaded model
 */
std::unique_ptr<treelite::Model> LoadXGBoostJSONModelString(
    char const* json_str, std::size_t length, char const* config_json);

}  // namespace frontend
}  // namespace treelite

#endif  // TREELITE_FRONTEND_H_
