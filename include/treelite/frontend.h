/*!
 * Copyright (c) 2017-2023 by Contributors
 * \file frontend.h
 * \brief Collection of front-end methods to load or construct ensemble model
 * \author Hyunsu Cho
 */
#ifndef TREELITE_FRONTEND_H_
#define TREELITE_FRONTEND_H_

#include <cstddef>
#include <memory>
#include <string>

namespace treelite {

class Model;  // forward declaration

namespace frontend {

//--------------------------------------------------------------------------
// Model loaders for XGBoost and LightGBM
//--------------------------------------------------------------------------
/*!
 * \brief Load a model file generated by XGBoost (dmlc/xgboost), stored in the legacy binary
 *        format.
 * \param filename Name of model file
 * \return Loaded model
 */
std::unique_ptr<treelite::Model> LoadXGBoostModelLegacyBinary(std::string const& filename);
/*!
 * \brief Load an XGBoost model from a memory buffer.
 * \param buf memory buffer
 * \param len size of memory buffer
 * \return loaded model
 */
std::unique_ptr<treelite::Model> LoadXGBoostModelLegacyBinary(void const* buf, std::size_t len);
/*!
 * \brief Load a model file generated by XGBoost (dmlc/xgboost), stored in the JSON format.
 * \param filename Name of model file
 * \param config_json JSON string consisting of key-value pairs; used for configuring the model
 *                    parser
 * \return Loaded model
 */
std::unique_ptr<treelite::Model> LoadXGBoostModel(char const* filename, char const* config_json);
/*!
 * \brief Load an XGBoost model from a JSON string
 * \param json_str JSON char array
 * \param length Length of JSON char array
 * \param config_json JSON string consisting of key-value pairs; used for configuring the model
 *                    parser
 * \return Loaded model
 */
std::unique_ptr<treelite::Model> LoadXGBoostModelFromString(
    char const* json_str, std::size_t length, char const* config_json);

}  // namespace frontend
}  // namespace treelite

#endif  // TREELITE_FRONTEND_H_
